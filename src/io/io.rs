use std::{path::{Path, PathBuf}, fs::{OpenOptions, DirEntry, File}, io::{BufWriter, Write, Read}, borrow::{Cow, Borrow}, sync::Arc, time::Instant, fmt::Display};

use logger::{error, backtrace};
use serde::Serialize;
use serde_json::Value;
use encoding::{all::WINDOWS_1251, DecoderTrap, Encoding};
 
 /// Copy files from source to destination recursively.
 pub fn copy_recursively(source: impl AsRef<Path>, destination: impl AsRef<Path>) -> std::io::Result<()> 
 {
    std::fs::create_dir_all(&destination)?;
    for entry in std::fs::read_dir(source)? 
    {
        let entry = entry?;
        let filetype = entry.file_type()?;
        if filetype.is_dir() 
        {
            copy_recursively(entry.path(), destination.as_ref().join(entry.file_name()))?;
        }
        else 
        {
            let dest = destination.as_ref().join(entry.file_name());
            std::fs::copy(entry.path(), &dest)?;
            if entry.path().extension().unwrap() == "zip"
            {
                unzip(&dest);
            }
        }
    }
    Ok(())
 }

pub fn extension_is(f: &DirEntry, ext:&str) -> bool
{
    f.path().extension().is_some() && f.path().extension().unwrap() == ext
}
pub fn extension_path_is(f: &PathBuf, ext:&str) -> bool
{
    f.extension().is_some() && f.extension().unwrap() == ext
}
///–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pub fn get_files<P: AsRef<Path>>(path: P) -> Option<Vec<DirEntry>>
{
    let paths = std::fs::read_dir(path.as_ref());
    if paths.is_err()
    {
        error!("üò≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {} -> {}", path.as_ref().display(), paths.err().unwrap());
        return None;
    }
    let mut entry = vec![];
    for e in paths.unwrap()
    {
        if e.is_err()
        {
            error!("{}", e.err().unwrap());
            return None;
        }
        if let Some(_) = e.as_ref().unwrap().file_name().to_str()
        {
            entry.push(e.unwrap());
        }
        else
        {
            error!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {}", path.as_ref().display());
        }   
    }
    return Some(entry);
}

pub fn write_value_to_file(data: &Value, file_name: &str) -> bool
{
    let pretty = serde_json::to_string_pretty(&data);
    if pretty.is_err()
    {
        error!("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª! {}", pretty.err().unwrap().to_string());
        return false;
    }
    let path = file_name.to_owned();
    let write = OpenOptions::new()
    .write(true)
    .create(true)
    .open(path);

    let mut f = BufWriter::new(write.unwrap());
    let write = f.write_all(pretty.unwrap().as_bytes());
    if write.is_err()
    {
        logger::error!("{}", write.err().unwrap());
        return false;
    }
    else 
    {
        return true;
    }
   
}


pub fn write_string_to_file(data: &str, file_name: &str) -> bool
{
    let path =  file_name.to_owned();
    let write = OpenOptions::new()
    .write(true)
    .create(true)
    .open(path);
    if write.is_err()
    {
        error!("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª! {}", write.err().unwrap());
        return false;
    }
    let mut f = BufWriter::new(write.unwrap());
    let file = f.write_all(data.as_bytes());
    if file.is_err()
    {
        logger::error!("{}", file.err().unwrap());
        return false;
    }
    else 
    {
        return true;
    }
}

///–ß–∏—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª –≤ —Å—Ç—Ä–æ–∫—É –∏–∑ —á–∏—Å—Ç–æ–≥–æ utf-8
// pub fn read_file(file_path: &Path) -> Option<String>
// {
//     let file = std::fs::read_to_string(file_path);
//     if file.is_err()
//     {
//         let err = file.err().unwrap();
       
//         error!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {} - {}", file_path.display(), err);
//         return None;
//     }
//     Some(file.unwrap())
// }

///–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
pub fn read_file_to_binary(file_path: &PathBuf) -> Option<Vec<u8>>
{
    if let  Ok(f) = File::open(file_path).as_mut()
    {
        //f.read(&mut buffer);
        let mut buffer = Vec::new();
        if f.read_to_end(&mut buffer).is_ok()
        {
            return Some(buffer);
        }
        else 
        {
            return None;
        }
    }
    None
}

//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
pub fn path_is_exists<P: AsRef<Path>>(path: P ) -> bool
{
    let target_path = Path::new(path.as_ref());
    if let Ok(e) = target_path.try_exists()
    {
        if !e
        {
            //let err = ["–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ", path.as_ref(), " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"].concat();
            //error!("{}", err);
            return false;
        }
        else 
        {
            return true;
        }
    }
    else 
    {
        return false;
    }
}

///–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ utf-8 –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞ —Ç–æ –ø—Ä–æ–±—É–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ windows-1251
/// –∏ –æ—Ç–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –±—É–∫–≤—É –∞... –∑–∞ —ç—Ç–æ –≤–æ—Ç —Å—Ç—ã–¥–Ω–æ, –Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∏—Ä—Ä–∏–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–æ—Ö–æ—Ç–∞
/// –¥–∞ –∏ —Å–ª–∏—à–∫–æ–º —Ç–∞–∫–æ–µ –Ω–∞ —É–¥–∞—á—É... —Ç–æ —Å—Ç–∞–≤–∏—Ç –º–µ—Ç–∫—É —á—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
pub fn read_file(path: &Path) -> Option<String>
{
    let mut bytes = Vec::new();
    //let mut ok_encoding = true;
    let file = std::fs::File::open(path);
    if file.is_err()
    {
        logger::error!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ {}: {}", path.display(), file.as_ref().err().unwrap());
        return None;
    }
    let binary = file.as_ref().unwrap().read_to_end(&mut bytes);
    if binary.is_err()
    {
        logger::error!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {}: {}", path.display(), binary.as_ref().err().unwrap());
        return None;
    }
    let _ = file.as_ref().unwrap().read_to_end(&mut bytes);
    //–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ –ø—Ä–æ–±—É–µ–º utf-8, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ –ø—Ä–æ–±—É–µ–º windows-1251
    return enc_utf_8(&bytes, path);

    fn enc_utf_8(bytes: &[u8], path: &Path) -> Option<String>
    {
        let utf8 = std::str::from_utf8(&bytes);
        if let Ok(u8) = utf8
        {
            return Some(u8.to_owned());
        }
        else 
        {
            return enc_win1251(bytes, path);
        }
    }
    fn enc_win1251(bytes: &[u8], path: &Path) -> Option<String>
    {
        let result = WINDOWS_1251.decode(&bytes, DecoderTrap::Strict);
        if result.is_err()
        {
            logger::error!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ windows-1251 {}: \r\n{}", path.display(), result.as_ref().err().unwrap());
            return None;
        }
        return result.ok(); 
    }
}

///–∞–Ω–∑–∏–ø–∏–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ–ø—É—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—è –∏–∑ –≤ paths, –∏ –æ—Ç–¥–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É xml —Ñ–∞–π–ª passport.xml (–æ–±—ã—á–Ω–æ —É –Ω–µ–≥–æ —Ç–∞–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–æ–µ, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –≤ –∞—Ä—Ö–∏–≤–µ –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è —Ñ–∞–π–ª xml)
fn unzip(zip_file: &PathBuf)
{
    let unzip_dir = "container";
    let zip_file = zip_file;
    let mut absolute_path_to_dir = zip_file.clone();
    absolute_path_to_dir.pop();
    absolute_path_to_dir.push(unzip_dir);
    let _ = std::fs::create_dir(&absolute_path_to_dir);
    let file = std::fs::File::open(zip_file.as_path());
    if let Ok(file) = file
    {
        let archive = zip::ZipArchive::new(file);
        if archive.is_err()
        {
            logger::error!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞—Ä—Ö–∏–≤–∞ {} {}", zip_file.display(), archive.err().unwrap().to_string());
            return
        }
        let mut archive = archive.unwrap();
        for i in 0..archive.len() 
        {
            let mut file = archive.by_index(i).unwrap();
            let f_name = match file.enclosed_name() 
            {
                Some(path) => path.to_owned(),
                None => continue,
            };
            let file_path = Path::new(&absolute_path_to_dir)
            .join(&f_name);
            let mut outfile = std::fs::File::create(&file_path).unwrap();
            std::io::copy(&mut file, &mut outfile).unwrap();
        }
    }
    else
    {
        logger::error!("–§–∞–π–ª {} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", zip_file.display());
        return
    }
    logger::info!("–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –∞—Ä—Ö–∏–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ {}", zip_file.display());
}