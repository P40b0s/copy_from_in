use std::{ops::Deref, path::PathBuf, sync::Mutex};

use logger::error;
use once_cell::sync::Lazy;
use settings::{Settings, Task};
use redb::{Database, Error, ReadableTable, ReadableTableMetadata, TableDefinition};

static DB_NAME: &'static str = "excludes.redb";

///–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é redb storage
pub struct KeyValueStore
{
    db: Lazy<Mutex<Database>>
}
impl KeyValueStore
{
    pub fn new() -> Self
    {
        Self { db: Lazy::new(|| Mutex::new(Database::create(DB_NAME).unwrap())) }
    }
}
struct ExcludesService<T>(T) where T: ExcludesTrait;
impl<T> Deref for ExcludesService<T> where T: ExcludesTrait
{
    type Target = T;
    fn deref(&self) -> &Self::Target 
    {
        &self.0
    }
}


pub trait ExcludesTrait
{
    ///–î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –µ–µ –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    ///–µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true —Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ false —Ç–æ —Ç–∞–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–∞–º —É–∂–µ –µ—Å—Ç—å
    fn add(&self, task_name: &str, dir: &str) -> Result<bool, Error>;
    ///–£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç
    fn delete(&self, task_name: &str, dir: &str) -> Result<(), Error>;
    ///–û–±—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ (*.task) —É–¥–∞–ª—è–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç 
    /// –ø–æ –ø—É—Ç–∏ source_dir –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
    fn truncate(&self, tasks: &[Task]) -> Result<u64, Error>;
    ///–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    fn clear(&self, task_name: &str) -> Result<(), Error>;
}


static DB : Lazy<Mutex<Database>> = Lazy::new(|| Mutex::new(Database::create(DB_NAME).unwrap()));
impl ExcludesTrait for KeyValueStore
{
    fn add(&self, task_name: &str, dir: &str) -> Result<bool, Error>
    {
        let mut added = false;
        let db = DB.lock().unwrap();
        let write_tr = db.begin_write()?;
        drop(db);
        {
            let td = TableDefinition::<&str, u8>::new(task_name);
            let mut table = write_tr.open_table(td)?;
            let get = table.get(dir)?;
            if get.is_none()
            {
                drop(get);
                let _ = table.insert(dir, 0)?;
                added = true;
            }
        }
        write_tr.commit()?;
        return Ok(added);
    }

    fn delete(&self, task_name: &str, dir: &str) -> Result<(), Error>
    {
        let db = DB.lock().unwrap();
        let write_tr = db.begin_write()?;
        drop(db);
        {
            let td = TableDefinition::<&str, u8>::new(task_name);
            let mut table = write_tr.open_table(td)?;
            let _ = table.remove(dir)?;
        }
        write_tr.commit()?;
        Ok(())
    }

    fn truncate(&self, tasks: &[Task]) -> Result<u64, Error>
    {
        let mut count: u64 = 0;
        let mut table_count: u64 = 0;
        for t in tasks
        {
            if let Some(dirs) = get_dirs(t.get_source_dir())
            {
                let db = DB.lock().unwrap();
                let write_tr = db.begin_write()?;
                drop(db);
                {
                    let td = TableDefinition::<&str, u8>::new(t.get_task_name());
                    table_count = write_tr.open_table(td.clone())?.len()?;
                    let _ = write_tr.delete_table(td.clone())?;
                    let mut table = write_tr.open_table(td)?;
                    for d in &dirs
                    {
                        let _ = table.insert(d.as_str(), 0)?;
                    }
                }
                write_tr.commit()?;
                //–ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–º–µ—é—â–∏—Ö—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
                if table_count >= dirs.len() as u64
                {
                    count += table_count - dirs.len() as u64;
                }
            }
        }
        Ok(count)
    }

    fn clear(&self, task_name: &str) -> Result<(), Error>
    {
        let db = DB.lock().unwrap();
        let write_tr = db.begin_write()?;
        drop(db);
        {
            let td = TableDefinition::<&str, u8>::new(task_name);
            let _ = write_tr.delete_table(td)?;
        }
        write_tr.commit()?;
        Ok(())
    }
}


pub fn get_dirs(path: &PathBuf) -> Option<Vec<String>>
{
    let paths = std::fs::read_dir(path);
    if paths.is_err()
    {
        error!("üò≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {} - {}", path.display(), paths.err().unwrap());
        return None;
    }
    let mut dirs = vec![];
    for d in paths.unwrap()
    {
        let dir = d.unwrap().file_name().to_str().unwrap().to_owned();
        dirs.push(dir);
    }
    return Some(dirs);
}

#[cfg(test)]
mod tests
{
    use std::ops::Deref;
    use logger::debug;

    use crate::services::redb::ExcludesTrait;
    use super::ExcludesService;
   ///–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –∏—Ö —É–¥–∞–ª–µ–Ω–∏–µ
    #[test]
    fn test_redb_create_clear()
    {
        logger::StructLogger::new_default();
        let t = super::ExcludesService(super::KeyValueStore::new());
        let tasks = vec!["task_1", "task_2"];
        let add_1 = t.add(tasks[0], "1");
        let add_2 = t.add(tasks[1], "1");
        debug!("{:?} {:?}", &add_1, &add_2);
        assert!(add_1.is_ok() && add_2.is_ok());
        let d = t.clear(tasks[0]);
        assert!(d.is_ok());
        let d2 = t.clear(tasks[1]);
        assert!(d2.is_ok());
    }
/// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    #[test]
    fn test_redb_add_del()
    {
        let t = super::ExcludesService(super::KeyValueStore::new());
        let tasks = vec!["task_1", "task_2"];
        let add_1 = t.add(tasks[0], "1");
        assert!(add_1.unwrap());
        let del_1 = t.delete(tasks[0], "1");
        assert!(del_1.is_ok()); 
    }
    ///–ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    #[test]
    fn test_redb_skip_add_double()
    {
         let t = super::ExcludesService(super::KeyValueStore::new());
        let tasks = vec!["task_1", "task_2"];
        let add_1 = t.add(tasks[0], "21");
        let add_2 = t.add(tasks[0], "21");
        assert!(add_1.unwrap(), "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è");
        assert!(!add_2.unwrap(), "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Ö–æ—Ç—è —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ!");
        let del_1 = t.delete(tasks[0], "21");
        assert!(del_1.is_ok(), "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –Ω–µ —É—Å–ø–µ—à–Ω–æ"); 
    }
}