use std::{fs::{DirEntry, File, OpenOptions}, io::{BufWriter, Read, Write}, path::{Path, PathBuf}, time::SystemTime};

use logger::{debug, error};
use serde_json::Value;

 
 /// –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
 /// * check_duration —Å —Ç–∞–∫–æ–π –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–µ—Ç
 pub fn copy_recursively(source: impl AsRef<Path>, destination: impl AsRef<Path>, check_duration: u64) -> std::io::Result<u64> 
 {
    if std::fs::read_dir(source.as_ref())?.count() == 0
    {
        return Ok(0);
    }
    let start = std::time::SystemTime::now();
    std::fs::create_dir_all(&destination)?;
    let mut files: Vec<(PathBuf, PathBuf)> = vec![];
    let mut entry_count = 0;
    //debug!("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ `{}` –≤ `{}`...", source.as_ref().display(), destination.as_ref().display());
    for entry in std::fs::read_dir(source.as_ref())? 
    {
        let entry = entry?;
        let filetype = entry.file_type()?;
        entry_count += 1;
        if filetype.is_dir() 
        {
            copy_recursively(entry.path(), destination.as_ref().join(entry.file_name()), check_duration)?;
        }
        else 
        {
            let dest = destination.as_ref().join(entry.file_name());
            let mut modifed_time: Option<SystemTime> = None;
            loop
            {
                //–≤ —Ü–∏–∫–ª–µ —Å–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∂–¥–µ–º –µ—â–µ N —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                let metadata = std::fs::metadata(&entry.path())?;
                if let Ok(md_time) = metadata.modified()
                {
                    if modifed_time.is_none()
                    {
                        modifed_time = Some(md_time);
                    }
                    else
                    {
                        if modifed_time.as_ref().unwrap() <  &md_time
                        {
                            modifed_time = Some(md_time);
                        }
                        else
                        {
                            modifed_time = None;
                            files.push((entry.path(), dest.clone()));
                            break;
                        }
                    }
                }
                std::thread::sleep(std::time::Duration::from_millis(check_duration));
            }
        }
    }
    //–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–Ω–∞—á–∞–ª–∞
    let new_count_check = std::fs::read_dir(source.as_ref())?;
    let count = new_count_check.count();
    //debug!("–Ω–æ–≤–æ–µ –∫–æ–ª—á–∏–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ `{}` —Å—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ `{}`...", entry_count, count);
    if entry_count != count
    {
        return copy_recursively(source, destination, check_duration);
    }
    //–∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–∫–µ
    for f in files
    {
        debug!("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ `{}` –≤ `{}`...", f.0.display(), f.1.display());
        std::fs::copy(f.0, f.1)?;
    }
    let end = std::time::SystemTime::now();
    let duration = end.duration_since(start).unwrap();
    Ok(duration.as_secs())
 }

pub fn extension_is(f: &DirEntry, ext:&str) -> bool
{
    f.path().extension().is_some() && f.path().extension().unwrap() == ext
}
pub fn extension_path_is(f: &PathBuf, ext:&str) -> bool
{
    f.extension().is_some() && f.extension().unwrap() == ext
}
///–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pub fn get_files<P: AsRef<Path>>(path: P) -> Option<Vec<DirEntry>>
{
    let paths = std::fs::read_dir(path.as_ref());
    if paths.is_err()
    {
        error!("üò≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {} -> {}", path.as_ref().display(), paths.err().unwrap());
        return None;
    }
    let mut entry = vec![];
    for file in paths.unwrap()
    {
        if file.is_err()
        {
            error!("üò≥{}", file.err().unwrap());
            return None;
        }
        if let Some(_) = file.as_ref().unwrap().file_name().to_str()
        {
            entry.push(file.unwrap());
        }
        else
        {
            error!("üò≥–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {}", path.as_ref().display());
        }   
    }
    return Some(entry);
}
pub fn get_dirs(path: &PathBuf) -> Option<Vec<String>>
{
    let paths = std::fs::read_dir(path);
    if paths.is_err()
    {
        error!("üò≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {} - {}", path.display(), paths.err().unwrap());
        return None;
    }
    let mut dirs = vec![];
    for d in paths.unwrap()
    {
        let dir = d.unwrap().file_name().to_str().unwrap().to_owned();
        dirs.push(dir);
    }
    return Some(dirs);
}
pub fn write_value_to_file(data: &Value, file_name: &str) -> bool
{
    let pretty = serde_json::to_string_pretty(&data);
    if pretty.is_err()
    {
        error!("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª! {}", pretty.err().unwrap().to_string());
        return false;
    }
    let path = file_name.to_owned();
    let write = OpenOptions::new()
    .write(true)
    .create(true)
    .open(path);

    let mut f = BufWriter::new(write.unwrap());
    let write = f.write_all(pretty.unwrap().as_bytes());
    if write.is_err()
    {
        logger::error!("{}", write.err().unwrap());
        return false;
    }
    else 
    {
        return true;
    }
   
}


pub fn write_string_to_file(data: &str, file_name: &str) -> bool
{
    let path =  file_name.to_owned();
    let write = OpenOptions::new()
    .write(true)
    .create(true)
    .open(path);
    if write.is_err()
    {
        error!("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª! {}", write.err().unwrap());
        return false;
    }
    let mut f = BufWriter::new(write.unwrap());
    let file = f.write_all(data.as_bytes());
    if file.is_err()
    {
        logger::error!("{}", file.err().unwrap());
        return false;
    }
    else 
    {
        return true;
    }
}
///–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
pub fn read_file_to_binary(file_path: &PathBuf) -> Option<Vec<u8>>
{
    if let  Ok(f) = File::open(file_path).as_mut()
    {
        //f.read(&mut buffer);
        let mut buffer = Vec::new();
        if f.read_to_end(&mut buffer).is_ok()
        {
            return Some(buffer);
        }
        else 
        {
            return None;
        }
    }
    None
}

//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
pub fn path_is_exists<P: AsRef<Path>>(path: P ) -> bool
{
    let target_path = Path::new(path.as_ref());
    if let Ok(e) = target_path.try_exists()
    {
        if !e
        {
            //let err = ["–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ", path.as_ref(), " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"].concat();
            //error!("{}", err);
            return false;
        }
        else 
        {
            return true;
        }
    }
    else 
    {
        return false;
    }
}
#[cfg(test)]
mod tests
{
    #[test]
    fn test_copy()
    {
        logger::StructLogger::initialize_logger();
        super::copy_recursively(
        "/hard/xar/projects/rust/copy_from_in/test_data/in/38773995_1_1_unzip",
        "/hard/xar/projects/rust/copy_from_in/test_data/in/test_copy",
        1000);
    }
}